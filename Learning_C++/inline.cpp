/*
	2020年4月17日18:32:00
	内联函数

	函数调用是有时间和空间开销的。
	程序在执行一个函数之前需要做一些准备工作，
	要将实参、局部变量、返回地址以及若干寄存器都压入栈中，
	然后才能执行函数体中的代码；
	函数体中的代码执行完毕后还要清理现场，
	将之前压入栈中的数据都出栈，
	才能接着执行函数调用位置以后的代码。

	如果函数体代码比较多，需要较长的执行时间，
	那么函数调用机制占用的时间可以忽略；
	如果函数只有一两条语句，
	那么大部分的时间都会花费在函数调用机制上，
	这种时间开销就就不容忽视。

	为了消除函数调用的时空开销，
	C++ 提供一种提高效率的方法，
	即在编译时将函数调用处用函数体替换，
	类似于C语言中的宏展开。
	这种在函数调用处直接嵌入函数体的函数
	称为内联函数（Inline Function），
	又称内嵌函数或者内置函数。

	指定内联函数的方法很简单，只需要在函数定义处增加 inline 关键字

*/

#include <iostream>

using namespace std;

inline void swap(int *a, int *b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

int main(int argc, char const *argv[])
{
	int m, n;
	cin>>m>>n;

	cout<<m<<", "<<n<<endl;
	swap(&m, &n);

	cout<<m<<", "<<n<<endl;
	return 0;
}

/*
12 23
12, 23
23, 12

注意，要在函数定义处添加 inline 关键字，
在函数声明处添加 inline 关键字虽然没有错，
但这种做法是无效的，编译器会忽略函数声明处的 inline 关键字。

当函数比较复杂时，函数调用的时空开销可以忽略，
大部分的 CPU 时间都会花费在执行函数体代码上，
所以我们一般是将非常短小的函数声明为内联函数。

由于内联函数比较短小，我们通常的做法是省略函数原型，
将整个函数定义（包括函数头和函数体）放在本应该提供函数原型的地方。
*/
