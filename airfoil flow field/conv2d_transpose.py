import tensorflow as tf

x1 = tf.constant(1.0, shape=[1,3,3,1])
x2 = tf.constant(1.0, shape=[1,6,6,3])
x3 = tf.constant(1.0, shape=[1,5,5,3])
kernel = tf.constant(1.0, shape=[3,3,3,1])

"先进行卷积操作"
"此时kernel的参数意义为[height, width, in_channel, out_channel]"
"input->[1,5,5,3],kernel->[3,3,3,1]"
sess = tf.Session()
print("原始输入x3 = \n", sess.run(x3))
y3 = tf.nn.conv2d(x3, kernel, strides=[1,2,2,1], padding="SAME")
print("y3.shape = ",y3.shape)
# 1,3,3,1

print("x3卷积之后 y3 = \n",sess.run(y3))

"----------------"
"对y3进行反卷积"
"此时kernel的参数意义是[height, width, out_channel, in_channel]"
"y3->[1,3,3,1], kernel->[3,3,3,1]"
y3_ = tf.nn.conv2d_transpose(y3, kernel, output_shape=[1,5,5,3],
                            strides=[1,2,2,1], padding="SAME")

# sess = tf.Session()
print("进行反卷积之后y3_.shape = ",y3_.shape)
# 1,5,5,3
print("y3反卷积之后 y3_ = \n",sess.run(y3_))
"----------------"
"接下来解释为什么反卷积里面要指定output_shape这个参数"
"x2->[1,6,6,3], kernel->[3,3,3,1]"
y4 = tf.nn.conv2d(x2, kernel, strides=[1,2,2,1], padding="SAME")
print("改变输入之后,进行卷积 y4.shape = ",y4.shape)
# 1,3,3,1
print("改变输入之后,y4 = \n",sess.run(y4))
# [1，6，6，3]和[1，5，5，3]的图经过卷积得到了相同的大小，[1，3，3，1]
sess.close()


原始输入x3 = 
 [[[[1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]]

  [[1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]]

  [[1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]]

  [[1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]]

  [[1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]
   [1. 1. 1.]]]]
y3.shape =  (1, 3, 3, 1)
x3卷积之后 y3 = 
 [[[[12.]
   [18.]
   [12.]]

  [[18.]
   [27.]
   [18.]]

  [[12.]
   [18.]
   [12.]]]]
进行反卷积之后y3_.shape =  (1, 5, 5, 3)
y3反卷积之后 y3_ = 
 [[[[12. 12. 12.]
   [30. 30. 30.]
   [18. 18. 18.]
   [30. 30. 30.]
   [12. 12. 12.]]

  [[30. 30. 30.]
   [75. 75. 75.]
   [45. 45. 45.]
   [75. 75. 75.]
   [30. 30. 30.]]

  [[18. 18. 18.]
   [45. 45. 45.]
   [27. 27. 27.]
   [45. 45. 45.]
   [18. 18. 18.]]

  [[30. 30. 30.]
   [75. 75. 75.]
   [45. 45. 45.]
   [75. 75. 75.]
   [30. 30. 30.]]

  [[12. 12. 12.]
   [30. 30. 30.]
   [18. 18. 18.]
   [30. 30. 30.]
   [12. 12. 12.]]]]
改变输入之后,进行卷积 y4.shape =  (1, 3, 3, 1)
改变输入之后,y4 = 
 [[[[27.]
   [27.]
   [18.]]

  [[27.]
   [27.]
   [18.]]

  [[18.]
   [18.]
   [12.]]]]

改变输入之后，经过卷积，得到的大小都是(1,3,3,1)
所以在反卷积的时候，要指定output_shape的大小
反过来看，那么[1，3，3，1]的图反卷积后得到什么呢？
产生了两种情况。所以这里指定output_shape是有意义的
